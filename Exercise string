#Write a Python program to get a string from a given string
#where all occurrences of its first char have been changed to '$', except the first char itself.
#Code:
def change_char(str1):
  char = str1[0]
  str1 = str1.replace(char, '$')
  str1 = char + str1[1:]

  return str1

print(change_char('restart'))
#############################################################################################################################
#Write a Python program to find the first repeated character of a given string where the index of first occurrence is smallest
def first_repeated_char_smallest_distance(str1):
   temp = {}
  for ch in str1:
    if ch in temp:
      return ch, str1.index(ch);
    else:
      temp[ch] = 0
  return 'None'
print(first_repeated_char_smallest_distance("abcabc"))
print(first_repeated_char_smallest_distance("abcb"))
print(first_repeated_char_smallest_distance("abcc"))
print(first_repeated_char_smallest_distance("abcxxy"))
print(first_repeated_char_smallest_distance("abc"))
############################################################################################################################
#Write a Python program to print the following floating numbers upto 2 decimal places with a sign
def floating_numbers(number):
     new_number= "{:+.2f}".format(number)
     return new_number
number=float(input("input number: "))
result=floating_numbers(number)
print("output: " + result )
######################################################################################################################

# Write a Python program to print the following floating numbers with no decimal places
def floating_numbers(number):
     new_number= "{:+.0f}".format(number)
     return new_number
number=float(input("input number: "))
result=floating_numbers(number)
print("output: " + result )
######################################################################################################################
# Write a Python program to print the following integers with zeros on the left of specified width.
def floating_numbers(number):
     new_number= str(number).rjust(2,'0')
     return new_number
number=input("input number: ")
result=floating_numbers(number)
print("output: " + result )
#######################################################################################################################
 #Write a Python program to display a number with a comma separator.
def floating_numbers(number):
     new_number= "{:,}".format(number)
     return new_number
number=float(input("input number: "))
result=floating_numbers(number)
print("output: " + result )
######################################################################################################################
# Write a Python program to print the following integers with '*' on the right of specified width
def floating_numbers(number):
     new_number= str(number).ljust(4,'*')
     return new_number
number=input("input number: ")
result=floating_numbers(number)
print("output: " + result )
####################################################################################################################
# Write a Python program to format a number with a percentage
def floating_numbers(number):
     new_number="{:.2%}".format(number)
     return new_number
number=float(input("input number: "))
result=floating_numbers(number)
print("output: " + result)
######################################################################################################################
#Write a Python program to display a number in left, right and center aligned of width 10
def floating_numbers(number):
     new_number1="{:<10}".format(number)
     new_number2="{:=10}".format(number)
     new_number3="{:>10}".format(number)
     list=new_number1 + new_number2 + new_number3
     return list
number=float(input("input number: "))
result=floating_numbers(number)
print("output: " + result)
#######################################################################################################################
#Write a Python program to count occurrences of a substring in a string.
def substring(myStr):
    return myStr.count("w3resource")
print(substring("welcome to w3resource.com"))
######################################################################################################################
#Write a Python program to count occurrences of a substring in a string.
def substring(myStr):
    return ''.join (reversed(myStr))
    #return mystr[::-1]
print(substring("welcome to w3resource.com"))
#####################################################################################################################
#Write a Python program to count occurrences of a substring in a string.
def substring(myStr):
    a=myStr.split()
    
    return ' ' .join (reversed(a))
    
print(substring("the quick brown fox"))
####################################################################################################################
#Write a Python program to count and display the vowels of a given te
def Check_Vow(string, vowels):
    final = [each for each in string if each in vowels]
    print(len(final))
    print(final)
     
# Driver Code
string = "Geeks for Geeks"
vowels = "AaEeIiOoUu"
Check_Vow(string, vowels)
###########################################################################################################################
#Write a Python program to split a string on the last occurrence of the delimite
str1 = "w,3,r,e,s,o,u,r,c,e"
print(str1.rsplit(',', 1))
print(str1.rsplit(',', 2))
print(str1.rsplit(',', 5))
##########################################################################################################################
#Write a Python program to find the first non-repeating character in given string.
def non_repeating(myStr):
  new_list=[]
  list={}
  for char in myStr:
    if char in list:
       list[char]+=1
    else:
      list[char]=1
      new_list.append(char)
  for char in new_list:
    if list[char]==1:
       return char

print(non_repeating('abcabcdef'))
##########################################################################################################################
#Write a Python program to print all 
# permutations with given repetition number of characters of a given string.
from itertools import product
def repetition(myStr,n):
  char= list(myStr)
  result=[]
  for c in product(char, repeat=n):
    result.append(c)
  return result 
  
print(repetition("A,B,C",3))
##########################################################################################################################
#Write a Python program to find the first repeated character of a given string where the index of first occurrence is smallest
def string(myStr):
  list={}
  for char in myStr:
    if char in list:
  
      return char,myStr.index(char)
    else:
       list[char]=0

  return None
print(string("abcabc"))
###########################################################################################################################
#Write a Python program to find the first repeated character in a given strin
def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return "None"

print(first_repeated_char("abcdabcd"))
print(first_repeated_char("abcd"))
####################################################################################################################################################
#Write a Python program to find the first repeated word in a given string
def string(myStr):
  list=[]
  for word in myStr.split():
    if word in list:
      return word
    else:
      list.append(word)
  return None


print(string(' ca bc ab ab cd ad'))
##################################################################################################################################################
##Write a Python program to remove spaces from a given string.
def string(myStr):
    new_string= myStr.replace(" ","")
    new_string_1=new_string.rjust(20)
    return'"'+new_string_1+'"'
print(string("w3resource .  com  "))
print(string("   w3resource.com  "))
##################################################################################################################################################
def string(myStr):
   new_list=[]
   list=dict()
   x=[char for char in myStr]
   for ch in x:
    if ch in list:
           list[ch]+= 1
    else:
            list[ch]=1
   y=sorted(list.items(),key=lambda kv:kv[1])   
   return(y[-1])      
        

print(string("welcome to w3resource"))
########################################################################################################################
#Write a Python program to compute sum of digits of a given string.
def string(myStr):
  sum=0
  for ch in myStr:
    if ch.isdigit():
      sum=sum+int(ch)
  return sum 
print(string("123abcd45"))
##############################################################################################################################
#Write a Python program to compute sum of digits of a given string.
def string(myStr):
  return myStr.replace('0','')
print(string("255.024.01.01"))
############################################################################################################################
#Write a Python program to find maximum length of consecutive 0's in a given binary string
def string(myStr):
  #x=[ch for ch in myStr]
  print(max(map(len,myStr.split('1'))))     

print(string('111000010000110'))
##############################################################################################################################
#Write a Python program to find all the common characters in lexicographical order from two given lower case strings. 
#If there are no common letters print "No common characters"
from collections import Counter 
str1 = 'Python'
str2 = 'PHP'
d1 = Counter(str1)
print(d1)
d2 = Counter(str2)
print(d2)
common_dict= d1&d2
print(common_dict)
if len(common_dict) == 0:
    print("no common character ")
common_chars = list(common_dict.elements())
print(common_chars)
common_chars = sorted(common_chars)
print(common_chars)
###############################################################################################################################################################
from collections import Counter 
def string(myStr1,myStr2):
  new_myStr1=myStr1.replace(" ","")
  print(new_myStr1)
  new_myStr2=myStr2.replace(" ","")
  print(new_myStr2)
  y=[char for char in new_myStr1]
  print(y)
  h=[char1 for char1 in new_myStr2]
  print(h)
  x=set(new_myStr1).intersection(new_myStr2)
  print(x)
  list1=[]
  for ch in y:
    if ch not in x:
      list1.append(ch)
  print(list1)
  list2=[]
  for item in h:
    if item not in y:
      list2.append(item)
  print(list2)
  differnc_list=list1+list2
  print(differnc_list)
  count=len(differnc_list)
  print(count)
myStr1=input("first string: ")
myStr2= input("second string: ")
print(string(myStr1,myStr2))
##################################################################################################################################################################
#67. Write a Python program to remove all consecutive duplicates of a given string
def string(myStr1):
    i=0
    y=[char for char in myStr1]
    t=""
    for ch in y:
        if ch in t:
           pass

        else:
            t=t+ch
            
    return(t)              
#myStr1=input("first string: ")
print(string("aaaaaebbbbb"))
-----------------------------------------------------------
from itertools import groupby 
def remove_all_consecutive(str1): 
	result_str = [] 
	for (key,group) in groupby(str1): 
		result_str.append(key) 
        
	return result_str
	
str1 = 'aaaaaebbbb'
print("Original string:" + str1)
print("After removing consecutive duplicates: " + str1)
print(remove_all_consecutive(str1))
###############################################################################################################################################################
