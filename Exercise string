#Write a Python program to get a string from a given string
#where all occurrences of its first char have been changed to '$', except the first char itself.
#Code:
def change_char(str1):
  char = str1[0]
  str1 = str1.replace(char, '$')
  str1 = char + str1[1:]

  return str1

print(change_char('restart'))
#############################################################################################################################
#Write a Python program to find the first repeated character of a given string where the index of first occurrence is smallest
def first_repeated_char_smallest_distance(str1):
   temp = {}
  for ch in str1:
    if ch in temp:
      return ch, str1.index(ch);
    else:
      temp[ch] = 0
  return 'None'
print(first_repeated_char_smallest_distance("abcabc"))
print(first_repeated_char_smallest_distance("abcb"))
print(first_repeated_char_smallest_distance("abcc"))
print(first_repeated_char_smallest_distance("abcxxy"))
print(first_repeated_char_smallest_distance("abc"))
############################################################################################################################
#Write a Python program to print the following floating numbers upto 2 decimal places with a sign
def floating_numbers(number):
     new_number= "{:+.2f}".format(number)
     return new_number
number=float(input("input number: "))
result=floating_numbers(number)
print("output: " + result )
######################################################################################################################

# Write a Python program to print the following floating numbers with no decimal places
def floating_numbers(number):
     new_number= "{:+.0f}".format(number)
     return new_number
number=float(input("input number: "))
result=floating_numbers(number)
print("output: " + result )
######################################################################################################################
# Write a Python program to print the following integers with zeros on the left of specified width.
def floating_numbers(number):
     new_number= str(number).rjust(2,'0')
     return new_number
number=input("input number: ")
result=floating_numbers(number)
print("output: " + result )
#######################################################################################################################
 #Write a Python program to display a number with a comma separator.
def floating_numbers(number):
     new_number= "{:,}".format(number)
     return new_number
number=float(input("input number: "))
result=floating_numbers(number)
print("output: " + result )
######################################################################################################################
# Write a Python program to print the following integers with '*' on the right of specified width
def floating_numbers(number):
     new_number= str(number).ljust(4,'*')
     return new_number
number=input("input number: ")
result=floating_numbers(number)
print("output: " + result )
####################################################################################################################
# Write a Python program to format a number with a percentage
def floating_numbers(number):
     new_number="{:.2%}".format(number)
     return new_number
number=float(input("input number: "))
result=floating_numbers(number)
print("output: " + result)
######################################################################################################################
#Write a Python program to display a number in left, right and center aligned of width 10
def floating_numbers(number):
     new_number1="{:<10}".format(number)
     new_number2="{:=10}".format(number)
     new_number3="{:>10}".format(number)
     list=new_number1 + new_number2 + new_number3
     return list
number=float(input("input number: "))
result=floating_numbers(number)
print("output: " + result)
#######################################################################################################################
#Write a Python program to count occurrences of a substring in a string.
def substring(myStr):
    return myStr.count("w3resource")
print(substring("welcome to w3resource.com"))
######################################################################################################################
#Write a Python program to count occurrences of a substring in a string.
def substring(myStr):
    return ''.join (reversed(myStr))
    #return mystr[::-1]
print(substring("welcome to w3resource.com"))
#####################################################################################################################
#Write a Python program to count occurrences of a substring in a string.
def substring(myStr):
    a=myStr.split()
    
    return ' ' .join (reversed(a))
    
print(substring("the quick brown fox"))
####################################################################################################################
#Write a Python program to count and display the vowels of a given te
def Check_Vow(string, vowels):
    final = [each for each in string if each in vowels]
    print(len(final))
    print(final)
     
# Driver Code
string = "Geeks for Geeks"
vowels = "AaEeIiOoUu"
Check_Vow(string, vowels)
###########################################################################################################################
#Write a Python program to split a string on the last occurrence of the delimite
str1 = "w,3,r,e,s,o,u,r,c,e"
print(str1.rsplit(',', 1))
print(str1.rsplit(',', 2))
print(str1.rsplit(',', 5))
##########################################################################################################################
#Write a Python program to find the first non-repeating character in given string.
def non_repeating(myStr):
  new_list=[]
  list={}
  for char in myStr:
    if char in list:
       list[char]+=1
    else:
      list[char]=1
      new_list.append(char)
  for char in new_list:
    if list[char]==1:
       return char

print(non_repeating('abcabcdef'))
##########################################################################################################################
#Write a Python program to print all 
# permutations with given repetition number of characters of a given string.
from itertools import product
def repetition(myStr,n):
  char= list(myStr)
  result=[]
  for c in product(char, repeat=n):
    result.append(c)
  return result 
  
print(repetition("A,B,C",3))
